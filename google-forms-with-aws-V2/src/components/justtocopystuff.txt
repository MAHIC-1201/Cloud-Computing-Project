import React, { useState } from "react";
import axios from 'axios';
import CropOriginalIcon from "@material-ui/icons/CropOriginal";
import Select from "@material-ui/core/Select";
import Switch from "@material-ui/core/Switch";
import ShortTextIcon from "@material-ui/icons/ShortText";
import MoreVertIcon from "@material-ui/icons/MoreVert";
import { BsTrash } from "react-icons/bs";
import { IconButton } from "@material-ui/core";
import MenuItem from "@material-ui/core/MenuItem";
import FormControlLabel from "@material-ui/core/FormControlLabel";
import FilterNoneIcon from "@material-ui/icons/FilterNone";
import AddCircleOutlineIcon from "@material-ui/icons/AddCircleOutline";
import OndemandVideoIcon from "@material-ui/icons/OndemandVideo";
import TextFieldsIcon from "@material-ui/icons/TextFields";
import { FcRightUp } from "react-icons/fc";
import CloseIcon from "@material-ui/icons/Close";
import Accordion from "@material-ui/core/Accordion";
import AccordionSummary from "@material-ui/core/AccordionSummary";
import AccordionDetails from "@material-ui/core/AccordionDetails";
import Button from "@material-ui/core/Button";
import Typography from "@material-ui/core/Typography";
import "./Question_form.css";


function Question_form() {
  const [questions, setQuestions] = useState([
    {
      questionText: "What is the capital city of Karnataka?",
      questionType: "radio",
      options: [
        { optionText: "Bengaluru" },
        { optionText: "Belgavi" },
        { optionText: "Hubli" },
        { optionText: "Mandya" },
      ],
      open: true,
      required: false,
      selectedOption: "" // Add selectedOption property to each question
    },
  ]);

  const handleSubmit = async () => {
    try {
      // Iterate over each question and submit its data
      for (const question of questions) {
        console.log("Submitting form data for question:", question.questionText);
        console.log("Selected option:", question.selectedOption); // Add this line for debugging
        const formData = {
          questionText: question.questionText,
          selectedOption: question.selectedOption,
          options: question.options.map(option => option.optionText) // Include options in formData
        };
        // Make a POST request to store form data
        await axios.post('http://localhost:3000/api/formData', formData);
      }
      console.log('Form data SUBMITTED:');
    } catch (error) {
      console.error('Error submitting form:', error);
      // Handle error (e.g., show error message)
    }
  };
  
  function changeQuestion(text, i) {
    const newQuestions = [...questions];
    newQuestions[i].questionText = text;
    setQuestions(newQuestions);
  }

  function changeOptionValue(text, i, j) {
    const newQuestions = [...questions];
    newQuestions[i].options[j].optionText = text;
    setQuestions(newQuestions);
  }

  function removeOption(i, j) {
    const newQuestions = [...questions];
    if (newQuestions[i].options.length > 1) {
      newQuestions[i].options.splice(j, 1);
      setQuestions(newQuestions);
    }
  }

  function addOption(i) {
    const newQuestions = [...questions];
    if (newQuestions[i].options.length < 5) {
      newQuestions[i].options.push({ optionText: "Option" });
      setQuestions(newQuestions);
    } else {
      console.log("Maximum 5 options allowed");
    }
  }

  function copyQuestion(i) {
    const newQuestion = { ...questions[i] };
    setQuestions([...questions, newQuestion]);
  }

  function deleteQuestion(i) {
    const newQuestions = [...questions];
    if (questions.length > 1) {
      newQuestions.splice(i, 1);
      setQuestions(newQuestions);
    }
  }

  function requiredQuestion(i) {
    const newQuestions = [...questions];
    newQuestions[i].required = !newQuestions[i].required;
    setQuestions(newQuestions);
  }

  function addMoreQuestionField() {
    setQuestions([
      ...questions,
      { questionText: "Question", questionType: "radio", options: [{ optionText: "Option 1" }], open: true, required: false },
    ]);
  }

  function handleOptionChange(optionText, i) {
    console.log("Option changed for question", i, "to", optionText);
    const newQuestions = [...questions];
    newQuestions[i] = {
      ...newQuestions[i],
      selectedOption: optionText
    };
    console.log("Selected option for question", i, "is", newQuestions[i].selectedOption);
    setQuestions(newQuestions);
  }
  
  
  
  
  function questionsUI() {
    return questions.map((ques, i) => (
      <Accordion expanded={ques.open} className={questions[i].open ? "add border" : ""} key={i}>
        <AccordionSummary aria-controls="panel1a-content" id="panel1a-header" elevation={1} style={{ width: "100%" }}>
          <Typography style={{ display: "none" }}>
            {ques.questionText}
          </Typography>
        </AccordionSummary>
        <AccordionDetails className="add_question">
          <div className="add_question_top">
            <input type="text" className="question" placeholder="Question" value={ques.questionText} onChange={(e) => { changeQuestion(e.target.value, i) }}></input>
            <CropOriginalIcon style={{ color: "#5F6368" }} />
            <Select
            className="select"
            style={{ color: "5F6368", fontSize: "13px" }}
            value={ques.selectedOption} // Ensure this is set to selectedOption
            onChange={(e) => handleOptionChange(e.target.value, i)} // Call handleOptionChange function
            >

              {ques.options.map((option, index) => (
                <MenuItem key={index} value={option.optionText} onClick={() => handleOptionChange(option.optionText, i)}>
                  {option.optionText}
                </MenuItem>
              ))}
            </Select>
          </div>
          {ques.options.map((op, j) => (
            <div className="add_question_body" key={j}>
              {(ques.questionType !== "text") ?
                <input type={ques.questionType} style={{ marginRight: "10px" }} /> :
                <ShortTextIcon style={{ marginRight: "10px" }} />
              }
              <div>
                <input type="text" className="text_input" placeholder="option" value={ques.options[j].optionText} onChange={(e) => { changeOptionValue(e.target.value, i, j) }}></input>
              </div>
              <CropOriginalIcon style={{ coor: "#5F6368" }} />
              <IconButton aria-label="delete">
                <CloseIcon onClick={() => { removeOption(i, j) }} />
              </IconButton>
            </div>
          ))}
          {ques.options.length < 5 ? (
            <div className="add_question_body">
              <FormControlLabel disabled control={
                (ques.questionType !== "text") ?
                  <input type={ques.questionType} color="primary" inputProps={{ 'aria-label': 'secondary checkbox' }} style={{ marginLeft: "10px", marginRight: "10px" }} disabled /> :
                  <ShortTextIcon style={{ marginRight: "10px" }} />
              } label={
                <div>
                  <input type="text" className="text_input" style={{ fontSize: "13px", width: "60px" }} placeholder="Add Other"></input>
                  <Button onClick={() => { addOption(i) }} size="small" style={{ textTransform: 'none', color: "#4285F4", fontSize: "13px", fontWeight: "600" }}>Add Option</Button>
                </div>
              } />
            </div>
          ) : ""}
          <div className="add_footer">
            <div className="add_question_botton_left">
              <Button size="small" style={{ textTransform: 'none', color: "#4285f4", fontSize: "13px", fontWeight: "600" }}>
                <FcRightUp style={{ border: "2px solid #4285F4", padding: "2px", marginRight: "8px" }} /> Answer Key
              </Button>
            </div>
            <div className="add_question_bottom">
              <IconButton aria-label="Copy" onClick={() => { copyQuestion(i) }}>
                <FilterNoneIcon />
              </IconButton>
              <IconButton aria-label="Delete" onClick={() => { deleteQuestion(i) }}>
                <BsTrash />
              </IconButton>
              <span style={{ color: "#5F6368", fontSize: "13px" }}> Required</span><Switch name="checkedA" color="primary" checked={ques.required} onClick={() => requiredQuestion(i)}></Switch>
              <IconButton >
                <MoreVertIcon />
              </IconButton>
            </div>
          </div>
        </AccordionDetails>
        <div className="question_edit">
          <AddCircleOutlineIcon onClick={addMoreQuestionField} className="edit" />
          <OndemandVideoIcon className="edit" />
          <TextFieldsIcon className="edit" />
        </div>
      </Accordion>
    ));
  }

  return (
    <div>
      <div className="question_form">
        <br />
        <div className="section">
          <div className="question_title_section">
            <div className="question_form_top">
              <input type="text" className="question_form_top_name" style={{ color: "black" }} placeholder="Untitled Document"></input>
              <input type="text" className="question_form_top_desc" placeholder="Form Description"></input>
            </div>
          </div>
          {questionsUI()}
          <button onClick={handleSubmit}>Submit</button>
        </div>
      </div>
    </div>
  );
}

export default Question_form;
